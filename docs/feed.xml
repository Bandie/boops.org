<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sir. Bøøps</title>
    <description>Just a blog for a bored internet user.</description>
    <link>https://boops.me/</link>
    <atom:link href="https://boops.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 31 Oct 2017 07:31:29 -0600</pubDate>
    <lastBuildDate>Tue, 31 Oct 2017 07:31:29 -0600</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Blocking/Redirecting websites via DNS</title>
        <description>&lt;p&gt;One of the simplest ways to block a website on you network is via DNS hijacking this allows you to return any response you wish in place of the actual request. Using this for dead simple and basic website blocking can be useful for many network setups in fact this is what &lt;a href=&quot;https://github.com/pi-hole/pi-hole&quot;&gt;PI-Hole&lt;/a&gt; uses to block ads for home networks. Now before we go any further remember this should not be used if you need to with 100% certainty block a website as if it’s easy to create the block it’s also just as easy to get around the block and getting around this block is as simple as changing your DNS server to another one!&lt;/p&gt;

&lt;p&gt;Now with all that in mind let’s see how to implement this on a network!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first thing you’re going to need is a DNS reslover/forwarder running &lt;a href=&quot;https://www.unbound.net/&quot;&gt;Unbound&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now onto blocking. if you want to simply block a website such as &lt;code class=&quot;highlighter-rouge&quot;&gt;google.com&lt;/code&gt; you would add the following line &lt;strong&gt;ABOVE&lt;/strong&gt; the forward zone and &lt;strong&gt;WITH&lt;/strong&gt; the dot after the TLD
&lt;code class=&quot;highlighter-rouge&quot;&gt;
local-zone: &quot;google.com.&quot; static
&lt;/code&gt;
Boom! Google will no longer resolve on you network!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now lets say you wanted to redirect &lt;code class=&quot;highlighter-rouge&quot;&gt;google.com&lt;/code&gt; to another page like a warning page or something or just a page that says NO on it. What ever the case it’s just as simple as blocking the page!
&lt;code class=&quot;highlighter-rouge&quot;&gt;
local-zone: &quot;google.com.&quot; static
local-data: &quot;google.com. 300 IN A &amp;lt;Some IPv4&amp;gt;&quot;
local-data: &quot;google.com. 300 IN AAAA &amp;lt;Some IPv6&amp;gt;&quot;
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will redirect the domain to the IP you set and from there you can do as you with to the domain!&lt;/p&gt;

&lt;p&gt;Thanks for reading! if you have any issues, questions or anything else please feel free to contact me via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#100;&amp;#109;&amp;#105;&amp;#110;&amp;#064;&amp;#098;&amp;#111;&amp;#111;&amp;#112;&amp;#115;&amp;#046;&amp;#109;&amp;#101;&quot;&gt;Email&lt;/a&gt; Using &lt;a href=&quot;https://frgl.pw/keys/Sir_Boops.txt&quot;&gt;GNUPG&lt;/a&gt; if you wish. Or via &lt;a href=&quot;https://twitter.com/Sir_Boops&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://mastodon.social/users/Sir_Boops&quot;&gt;Mastodon&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Jan 2017 11:51:00 -0700</pubDate>
        <link>https://boops.me/2017/01/27/blocking-redirecting-websites-via-dns.html</link>
        <guid isPermaLink="true">https://boops.me/2017/01/27/blocking-redirecting-websites-via-dns.html</guid>
        
        
      </item>
    
      <item>
        <title>Playing with OpenBSD</title>
        <description>&lt;p&gt;I first heard of *BSD several months ago in an off hand comment about FreeNAS and since then I’ve tried FreeBSD, DragonFlyBSD and now OpenBSD and the first biggest lesson I’ve learned, As dumb as it sounds *BSD is not Linux. Duh right? Well saying it aloud makes it sound dumb but you have to remember that i initially thought that the only difference would be the kernel meaning i was thinking it would be along the lines of GNU/BSD. Yes i know now how dumb this all sounds but i write this in hopes of anyone else who wants to try *BSD knows that *BSD uses the BSD userland not the GNU userland and if you’re unsure what i mean by userland give &lt;a href=&quot;https://en.wikipedia.org/wiki/User_space#Overview&quot;&gt;this&lt;/a&gt; a quick read and it should make some more sense.&lt;/p&gt;

&lt;p&gt;Now my thoughts on OpenBSD after using it for only ~a week on two of my VMs. I like it. The default install is quite simple and speedy, Upgrades from version to version are nice the default included apps are quite useful to get yourself setup quickly. The man pages are very very helpful along with the website itself having everything you’ll need to not only get setup but learn how to patch your systems kernel and teach you quite a bit more about how the system itself works! This all along with how well polished the whole system feels overall, This is a bit harder to explain so i urge you to try it out for yourself!&lt;/p&gt;

&lt;p&gt;Now the downsides, Truthfully I’ve not come across many so far but the one slightly annoying was (and this could and most likely is me still not fully understanding OpenBSD) is the lack of EXT4 support as all the drives that i use for storage have where formatted using EXT4 so i ended up having to reformat them to use FFS. Beyond that my only other complaint is the lack of the ability to install java using &lt;code class=&quot;highlighter-rouge&quot;&gt;pkg_add&lt;/code&gt;. Yes i know i can install it from ports but it would still be a nice touch to be able to install via pkg instead of compiling!&lt;/p&gt;

&lt;p&gt;Links!
* &lt;a href=&quot;http://www.openbsd.org/&quot;&gt;OpenBSD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! if you have any issues, questions or anything else please feel free to contact me via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#100;&amp;#109;&amp;#105;&amp;#110;&amp;#064;&amp;#098;&amp;#111;&amp;#111;&amp;#112;&amp;#115;&amp;#046;&amp;#109;&amp;#101;&quot;&gt;Email&lt;/a&gt; Using &lt;a href=&quot;https://frgl.pw/keys/Sir_Boops.txt&quot;&gt;GNUPG&lt;/a&gt; if you wish. Or via &lt;a href=&quot;https://twitter.com/Sir_Boops&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://mastodon.social/users/Sir_Boops&quot;&gt;Mastodon&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Jan 2017 09:13:00 -0700</pubDate>
        <link>https://boops.me/2017/01/07/playing-with-openbsd.html</link>
        <guid isPermaLink="true">https://boops.me/2017/01/07/playing-with-openbsd.html</guid>
        
        
      </item>
    
      <item>
        <title>Home Hosting</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://cdn.frgl.pw/blog/48/1.jpg&quot; alt=&quot;RPI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The RPI pictured above is what is serving up this blog!&lt;/p&gt;

&lt;p&gt;Ah, home hosting how i got my first taste of of running what goes into the work behind the services we all use everyday. I feel like I’ve looped as i started hosting everything from home to pushing everything to it’s own VPS back to home hosting some items although now it has become much more fun as I’ve learned over time and slowly expanded my home network into something that can securely host something like this blog my own personal MediaWiki and a few other services that I’ve not finished yet but will be attempting to deploy.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 07:13:00 -0700</pubDate>
        <link>https://boops.me/2016/12/28/home-hosting.html</link>
        <guid isPermaLink="true">https://boops.me/2016/12/28/home-hosting.html</guid>
        
        
      </item>
    
      <item>
        <title>So long Gitlab!</title>
        <description>&lt;p&gt;Ah Gitlab, You’re so pretty but have many, many faults. Top three being: Backups are very flaky, The application itself it very resource hungry and takes quite a long time to start, Finally a self hosted 11 repo limit? Jumping into a more detailed look of each of the reasons, For backups I’ve tried them twice the first time was using an older Gitlab version and trying to restore on a newer version. This can be semi-excused as version jumps can be hard to restore from. The second time though it was wasn’t changing versions and this one managed to destroy the install so perfectly that that install never worked again, Only spitting out 50X HTTP errors no matter what was done to it. Gitlab once it is started is not to resource hungry but starting Gitlab or updating Gitlab would take minutes to start to several minutes to update and 2.5~GB of RAM to do so. This final reason might have been an issue with my install as i can’t seem to find any specific info about it anywhere but after creating eleven projects Gitlab notified me that i have reached my project limit and would be unable to create any more. At first i thought it was going to be something as simple as raising the project limit for admins but after searching for roughly an hour and unable to find any documentation on that specific issue i finally caved and turned to GOGS.&lt;/p&gt;

&lt;p&gt;By contrast GOGS seems to have a dead simple backup system DB dump plus taring a folder being all that is needed, It is amazingly light starting it only a few seconds and updating as fast as you are able to clone the repo. And no project limits you cannot change! Now my option may change after using GOGS for a while as it does with almost any peice of software but so far the only downside i can see is this switch is i find Gitlab looks slightly better then GOGS!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/&quot;&gt;Gitlab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogs.io/&quot;&gt;GOGS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! if you have any issues, questions or anything else please feel free to contact me via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#100;&amp;#109;&amp;#105;&amp;#110;&amp;#064;&amp;#098;&amp;#111;&amp;#111;&amp;#112;&amp;#115;&amp;#046;&amp;#109;&amp;#101;&quot;&gt;Email&lt;/a&gt; Using &lt;a href=&quot;https://frgl.pw/keys/Sir_Boops.txt&quot;&gt;GNUPG&lt;/a&gt; if you wish. Or via &lt;a href=&quot;https://twitter.com/Sir_Boops&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://mastodon.social/users/Sir_Boops&quot;&gt;Mastodon&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Dec 2016 06:57:00 -0700</pubDate>
        <link>https://boops.me/2016/12/24/so-long-gitlab.html</link>
        <guid isPermaLink="true">https://boops.me/2016/12/24/so-long-gitlab.html</guid>
        
        
      </item>
    
      <item>
        <title>My Strange Tags</title>
        <description>&lt;p&gt;If you’re reading this you most likly are wondering why i tagged a post like i’m brain dead. Well you’re not to far from the truth as i use an auto tagger to tag posts for me based on the most popular tags on a post. If you want to see the code it’s &lt;a href=&quot;https://git.frgl.pw/Sir_Boops/Boopblr/src/master/src/main/java/me/boops/tags/FindTop.java&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don’t quite understand what i mean by that. In this example we’ll have three posts&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Post A: &lt;code class=&quot;highlighter-rouge&quot;&gt;#nice #cool #cute&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Post B &lt;code class=&quot;highlighter-rouge&quot;&gt;#fur #cute #fluffy #amaz&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Post C &lt;code class=&quot;highlighter-rouge&quot;&gt;#cool #cute #amazing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have three posts and their tags we can sort them by how many times they have been used&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#nice&lt;/code&gt; Uses -&amp;gt; 1&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#cool&lt;/code&gt; Uses -&amp;gt; 2&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#cute&lt;/code&gt; Uses -&amp;gt; 3&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#fur&lt;/code&gt; Uses -&amp;gt; 1&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#fluffy&lt;/code&gt; Uses -&amp;gt; 1&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#amaz&lt;/code&gt; Uses -&amp;gt; 1&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#amazing&lt;/code&gt; Uses -&amp;gt; 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now that we have usage counts using the same logic as the script and appending these tags to the post we will end up using the tags &lt;code class=&quot;highlighter-rouge&quot;&gt;#cute #cool #nice&lt;/code&gt;. The final tag coming from the top as the final five tags all have a usage value of one.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Dec 2016 10:14:00 -0700</pubDate>
        <link>https://boops.me/2016/12/22/my-strange-tags.html</link>
        <guid isPermaLink="true">https://boops.me/2016/12/22/my-strange-tags.html</guid>
        
        
      </item>
    
      <item>
        <title>Certbot/Letsencrypt Setup on a non-supported OS</title>
        <description>&lt;p&gt;If your like me and prefer to use a different distro other then Ubuntu or CentOS for servers you might have also had this problem of &lt;code class=&quot;highlighter-rouge&quot;&gt;Unable to bootstrap or your OS&lt;/code&gt; And the link that it spits out doesn’t have much information at all. Now bootstrapping certbot is really quite easy and for this tutorial i’m going to be using Void but the process will be the same on any other unsupported distro.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first thing you need is the dependencies. For certbot this mostly means Python witch makes this super easy as on Void the command to install all the system dependencies is &lt;code class=&quot;highlighter-rouge&quot;&gt;xbps-install -S git python python-virtualenv python-pip gcc gcc-c++ python-devel libressl-devel libffi-devel&lt;/code&gt; If you’re using a different distro simple install the equivalent packages on your system and you’re good to go!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Certbot creates itself a virtual environment using the &lt;code class=&quot;highlighter-rouge&quot;&gt;python-virtualenv&lt;/code&gt; package this helps make bootstrapping super easy as from here just clone the certbot repo &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/certbot/certbot&lt;/code&gt; Then &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into the newly cloned certbot directory and run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;./tools/venv.sh&lt;/code&gt; This will run a script that creates the virtual environment for certbot to run in and may take a while so i would suggest going to grab some more tea!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that the virtualenv is has been created we can enter it with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;source venv/bin/activate&lt;/code&gt; You will now see a &lt;code class=&quot;highlighter-rouge&quot;&gt;(venv)&lt;/code&gt; appear if you do congrats! You have just successfully bootstrapped certbot on a non supported OS!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using certbot from here is super simple as instead of running &lt;code class=&quot;highlighter-rouge&quot;&gt;./certbot-auto&lt;/code&gt; like normal you only have to run &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot&lt;/code&gt; ! And finally to quit the virtualenv just type &lt;code class=&quot;highlighter-rouge&quot;&gt;deactivate&lt;/code&gt; and it will drop you back into your normal terminal.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! if you have any issues, questions or anything else please feel free to contact me via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#098;&amp;#108;&amp;#111;&amp;#103;&amp;#064;&amp;#098;&amp;#111;&amp;#111;&amp;#112;&amp;#115;&amp;#046;&amp;#109;&amp;#101;&quot;&gt;Email&lt;/a&gt; If you wish with my GPG key &lt;a href=&quot;https://frgl.pw/keys/Sir_Boops.txt&quot;&gt;Here&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/Sir_Boops&quot;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 06:30:00 -0700</pubDate>
        <link>https://boops.me/2016/12/06/certbot-letsencrypt-setup-on-a-non-supported-os.html</link>
        <guid isPermaLink="true">https://boops.me/2016/12/06/certbot-letsencrypt-setup-on-a-non-supported-os.html</guid>
        
        
      </item>
    
      <item>
        <title>How to stream to multiple websites at once</title>
        <description>&lt;p&gt;If you’ve ever streamed before or watched streams you’ll know that you have many choices when it comes to streaming platforms and want to stream to multiple of them. The only thing holding you back if you suffer the same terrible luck as me is your limited slow upstream meaning you can only blast out to one at best. The way around this? a rebroadcasting box! It is exactly as it sounds a server that when you stream to it will automatically copy the stream and push it to any/all services you want. Including itself so you can have saved recordings of your stream online instead of having to re upload any one you wish to use.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Before we start you should quickly read over how to compile NGINX &lt;a href=&quot;https://boops.me/how-to-compile-nginx/&quot;&gt;Here&lt;/a&gt;, as it covers the basics of compiling NGINX such as needed libraries for compiling as those are of course required!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;So now that you’ve read over that why don’t we quickly download and compile! First thing to do if of course download the latest stable version of NGINX and NGINX-RTMP ( A Plugin for NGINX ) to your box. Make sure you check what the current stable version of &lt;a href=&quot;https://nginx.org/en/download.html&quot;&gt;NGINX&lt;/a&gt; and &lt;a href=&quot;https://github.com/arut/nginx-rtmp-module/releases&quot;&gt;NGINX-RTMP&lt;/a&gt; are as when you are reading this they might be widely out of date! After that you’ll want to download them like such below! 
&lt;code class=&quot;highlighter-rouge&quot;&gt;
wget https://nginx.org/download/nginx-1.10.2.tar.gz
wget https://github.com/arut/nginx-rtmp-module/archive/v1.1.10.tar.gz
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once have downloaded them we need to untar the downloaded. The &lt;code class=&quot;highlighter-rouge&quot;&gt;xvaf&lt;/code&gt; flags on the command mean in order: eXtract, Verbose, Any &amp;amp; Force meaning this tar command will decompress almost any tar file!
&lt;code class=&quot;highlighter-rouge&quot;&gt;
tar -xvaf nginx-1.10.2.tar.gz
tar -xvaf v1.1.10.tar.gz
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we want to enter the nginx directory that we just extracted then compile with the extra addon in the folder above the directory we can do this simply by running the below commands. Like i said earlier you can add plenty more things into NGINX with configure flags but i will only be using the necessary ones as more features can be your quest to figure out!
&lt;code class=&quot;highlighter-rouge&quot;&gt;
cd nginx-1.10.2/
./configure --add-module=../nginx-rtmp-module-1.1.10/ --prefix=/etc/nginx --with-ipv6
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that NGINX is configured we want to compile and install. If you’d like to compile faster you can use the first command below else use the lower one as it will always work. Simply replace &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cpu cores +1&amp;gt;&lt;/code&gt; with a number
&lt;code class=&quot;highlighter-rouge&quot;&gt;
make -j&amp;lt;cpu cores +1&amp;gt; &amp;amp;&amp;amp; make install
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Congrats NGINX with the addon NGINX-RTMP has been compiled and installed to the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/&lt;/code&gt; with the config file located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/conf/&lt;/code&gt;. That is out next target as this is where the magic happens!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;We now want to enter the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/conf/&lt;/code&gt; and edit the nginx.conf file and edit it using what ever text editor you like or nano as it is quite easy. This can be done by running the nano command followed by what you want to edit example &lt;code class=&quot;highlighter-rouge&quot;&gt;nano nginx.conf&lt;/code&gt;. Once inside if you plan to also use this server for a website scroll down to the bottom of the config and add the following lines. Replacing anything wrapped in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt; with your strings 
```
rtmp {
 server {
 listen 1935;
 allow publish &lt;your ip=&quot;&quot;&gt;;
 chunk_size 4096;
application &lt;some app=&quot;&quot; name=&quot;&quot;&gt; {
live on;
record off;
push rtmp://ingest-tor.beam.pro:1935/beam/&lt;key&gt;;
push rtmp://live-jfk.twitch.tv/app/&lt;key&gt;;
push rtmp://a.rtmp.youtube.com/live2/&lt;key&gt;
push rtmp://live.hitbox.tv/push/&lt;user name=&quot;&quot;&gt;?key=&lt;key&gt;;
 }
 application &lt;some test=&quot;&quot; app=&quot;&quot; name=&quot;&quot;&gt; {
live on;
record off;
}&lt;/some&gt;&lt;/key&gt;&lt;/user&gt;&lt;/key&gt;&lt;/key&gt;&lt;/key&gt;&lt;/some&gt;&lt;/your&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;}
}
```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now in that config you’ll notice that I’ve left some push commands for popular streaming services at the time of writing, If you don’t wish to stream to any of these simply remove those lines. The keen eyed of you will see the line “allow publish” followed by your IP address. We use this to make sure that the restreamer will only allow you you stream from that IP blocking any other requests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you’ve filled those in save and exit nano using &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL + O&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL + X&lt;/code&gt; and start NGINX by running the binary &lt;code class=&quot;highlighter-rouge&quot;&gt;./sbin/nginx&lt;/code&gt; if you didn’t see any errors that means it’s working! Else make sure your application name does not have any spaces and each line ends with a &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now to test it using your streaming software of choice or for me OBS-Studio open up the settings window streams tab and set stream type to &lt;code class=&quot;highlighter-rouge&quot;&gt;custom streaming server&lt;/code&gt; then fill in the &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream key&lt;/code&gt; field as is done below. Once you’ve done that click &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt; then try and start streaming. You should then see your self start broadcasting as normal then when you check the services you are also streaming to you should see then all come online within 3~ Seconds. If they do enjoy! else if they don’t and you can’t figure out why see the last bit of text to how to ask for help!
&lt;img src=&quot;https://cdn.frgl.pw/blog/43/1.png&quot; alt=&quot;obs&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! if you have any issues, questions or anything else please feel free to contact me via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#098;&amp;#108;&amp;#111;&amp;#103;&amp;#064;&amp;#098;&amp;#111;&amp;#111;&amp;#112;&amp;#115;&amp;#046;&amp;#109;&amp;#101;&quot;&gt;Email&lt;/a&gt; If you wish with my GPG key &lt;a href=&quot;https://frgl.pw/keys/Sir_Boops.txt&quot;&gt;Here&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/Sir_Boops&quot;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Oct 2016 10:43:00 -0600</pubDate>
        <link>https://boops.me/2016/10/30/how-to-stream-to-mutipule-websites-at-once.html</link>
        <guid isPermaLink="true">https://boops.me/2016/10/30/how-to-stream-to-mutipule-websites-at-once.html</guid>
        
        
      </item>
    
      <item>
        <title>Ubuntu</title>
        <description>&lt;p&gt;Ah Ubuntu, the distro every Linux junkie loves to hate or loves to ironically hate. The ladder I’m also guilty of. But Beyond the “L0l Amazon/Nobuntu” jokes Ubuntu is a very solid system with cool features such as a steady release schedule , Mostly up to date packages, Tons of support, Unity ( Please don’t hurt me! ) And the biggest one of all it’s name.&lt;/p&gt;

&lt;p&gt;But before i go into all of that how did i fare with Ubuntu 16.10? Well starting with the install i booted using UEFI like i enjoy doing as UEFI is the new cool thing for Linux distros but to my dismay i could not get Ubuntu to boot using UEFI with auto partitioning or manual partitioning. The issue to this I’m still not sure but after 3 attempts at a UEFI install i gave in and installed using legacy mode.&lt;/p&gt;

&lt;p&gt;The initial boot of Ubuntu was just as i remember  kinda slow but and with the popup for hot keys blasted in your face. Besides that though everything else went smoothly and before i knew it i had Nightly running and was watching flash videos while downloading more packages!&lt;/p&gt;

&lt;p&gt;Now, How much did i enjoy my time with Ubuntu in this week? Well, it’s another Distro. Yes, it’s has fancy tools baked in that can help beginners to Linux along with a super active forum. In fact my first Linux install was Ubuntu! But for the user that likes the tinker and make very things very specific Ubuntu can almost get their but it just misses the mark, Although i will coincide here as I’m comparing it’s customization options to that of Gentoo and by that comparison the only distros that would fit are source based distros. But Ubuntu is still missing some basic things that i thought would have been added by now like the Atom editor. Why that is missing i have no idea but it’s been missing for so long I’m starting to think that the Atom devs actively don’t want it on Ubuntu. And Unity despite my affection towards it it still has a sluggish feel to it even slower then KDE 5 which is really saying something about how i feel Unity has been optimized. This problem also seems to bleed into the whole system as it feels like performance is different on every reboot for what ever reason. This might be due to the fact it seems to do hidden kernel updates in the background using a ton of CPU power slowing to whole system down to a halt.&lt;/p&gt;

&lt;p&gt;So would i recommend Ubuntu? mostly no. If someone is new to Linux and wanted to try an easy distro i would point them to Manjaro as it has tons more base options for the DE first party supported! and for more advanced users wanting a simple easy desktop to use i would point them more towards Fedora, Angergos even Void has some nicely pre made desktop environments! As for would i use it myself? Well for servers yes Desktop no. For servers Ubuntu is amazing it has every package or library you could want it’s kept up to date it get security patches quickly you know how long you have per install before you have to update! It just all makes for a nice simple server managing experience.&lt;/p&gt;

&lt;p&gt;Thanks for reading! if you have any issues, questions or anything else please feel free to contact me via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#098;&amp;#108;&amp;#111;&amp;#103;&amp;#064;&amp;#098;&amp;#111;&amp;#111;&amp;#112;&amp;#115;&amp;#046;&amp;#109;&amp;#101;&quot;&gt;Email&lt;/a&gt; If you wish with my GPG key &lt;a href=&quot;https://frgl.pw/keys/Sir_Boops.txt&quot;&gt;Here&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/Sir_Boops&quot;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Oct 2016 18:09:00 -0600</pubDate>
        <link>https://boops.me/2016/10/22/ubuntu-2.html</link>
        <guid isPermaLink="true">https://boops.me/2016/10/22/ubuntu-2.html</guid>
        
        
      </item>
    
      <item>
        <title>Trying Manjaro</title>
        <description>&lt;p&gt;Manjaro, a pleasant distro based on Arch that comes with several different desktop flavors, Since it is based on Arch you might have been able to guess that it is bleeding edge and uses that latest versions of packages available.&lt;/p&gt;

&lt;p&gt;Installing Manjaro is super simple just point to the drive you want it installed on and spam next. But be warned as this threw me the first time Manjaro from live USB does take quite a while to boot as in 1-3 Minutes but once it does the live environment is nice and smooth!&lt;/p&gt;

&lt;p&gt;Upon first boot into to my newly installed GNOME environment i did the usual and ran an upgrade then rebooted but after that i was unable to log back into GNOME for some reason and after an hour or so playing with it i reinstalled using XFCE and it handled it all perfectly!&lt;/p&gt;

&lt;p&gt;The XFCE environment comes nicely setup with several features baked in such as a GUI based package manager and a nice dark theme by default. The desktop also comes with several pre-installed apps beyond what you usually see included, Including steam which stood out to me the most for being an odd app to include by default. All of the other pre installed apps are the ones you would be used to seeing such as libre office, Disk writer, GIMP, Firefox ect, ect.&lt;/p&gt;

&lt;p&gt;Now one of the coolest things I’ve seen in a distro in a while is a kernel version picker. As the name implies it allows you to choose what kernel you’d like to run and proceeds to reinstall any kernel specific apps such as the graphics drivers for that version. Beyond that it feels just like Arch as it uses pacman as the bleeding edge of package versions.&lt;/p&gt;

&lt;p&gt;So would i recommend this to people? Yes, since it is based on Arch that allows you to use the Arch wiki for issues the Manjaro forums/IRC seem quite active and it really gives off the Ubuntu feeling of i work great with a GUI but you can also use the command line if you wish. That in my eyes makes it perfect for people just starting with Linux! As for would i use it again? I can see myself installing this on a laptop that i use daily as it is made so you don’t have to use the command line which is perfect for those lazy days when i only feel like clicking. So overall i do like Manjaro and can see where it tries to fit and as of the time of writing this seems to be fitting quite well!&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Oct 2016 12:21:00 -0600</pubDate>
        <link>https://boops.me/2016/10/15/trying-manjaro.html</link>
        <guid isPermaLink="true">https://boops.me/2016/10/15/trying-manjaro.html</guid>
        
        
      </item>
    
      <item>
        <title>How to compile NGINX</title>
        <description>&lt;p&gt;Building an application from source can be a very daunting especially if you’ve never had or wanted to but compiling some apps ( Or all if you use Gentoo! ) can be quite helpful as the pre-compiled binary’s that come with your package manager might be widely out of date..Debian. This is when compiling is quite handy as you can quickly update from one version to the next with out having to wait or someone else to do it for you. Plus it also allows you to only add what you need to your running binary this means if you don’t need a feature you don’t have to waste RAM or CPU time on it!&lt;/p&gt;

&lt;p&gt;So, with all that being said how do we compile NGINX. First step is to pick out the versions we want so I’m going to use NGINX v1.11.5 as it is the latest at the time of writing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Once we have the version picked out we need to download them this can be done as such
&lt;code class=&quot;highlighter-rouge&quot;&gt;
wget http://nginx.org/download/nginx-1.11.5.tar.gz
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that we have them downloaded we need to De-compress them since it is a tar files we can use tar for this like so
&lt;code class=&quot;highlighter-rouge&quot;&gt;
tar -xvaf nginx-1.11.5.tar.gz
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that we have our two source code directories we will want to cd into the NGINX directory
&lt;code class=&quot;highlighter-rouge&quot;&gt;
cd nginx-1.11.5
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ok we are almost ready to configure the build! the last thing we need to do is install the needed libraries. If you’re running a Debian based OS ( Like Ubuntu ) you should just be able to copy and paste the command below else you will have to manually find the equivalent libraries on your distro
&lt;code class=&quot;highlighter-rouge&quot;&gt;
apt-get install gcc g++ libpcre3-dev zlib1g-dev make libssl-dev
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Watch out CPU here comes the compiler! now that we have everything we need lets see all the flags we can compile with using
&lt;code class=&quot;highlighter-rouge&quot;&gt;
./configure --help
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you run that you should see a large list of flags if you do good everything is working, else try and search up the error as this should have worked if you’ve followed this to here. Around half way down the list you’ll see some flags that add more options for your HTTP server, You can choose what ones you want except the &lt;code class=&quot;highlighter-rouge&quot;&gt;--with-http_ssl_module&lt;/code&gt; as we need this one to flag the SSL module to be included in the final binary that we are going to use!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’ve chosen now have all the flags you want like if you want to add HTTP/2 you can add the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;--with-http_v2_module&lt;/code&gt;. Or you just want a super simple NGINX server that also works! In that case we want to configure using the flags
&lt;code class=&quot;highlighter-rouge&quot;&gt;
./configure --prefix=/etc/nginx --with-http_ssl_module
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or if you want to add more features like the HTTP/2 example just add it to the end of this command like so
&lt;code class=&quot;highlighter-rouge&quot;&gt;
./configure --prefix=/etc/nginx --with-http_ssl_module --with-http_v2_module
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As you might be able to guess these configure commands can get quite long. Now before we compile NGINX you’ll notice in the two commands above their is a flag called prefix, This flag defines where this copy of NGINX is going to be installed to so if you run with the above command all the NGINX components will be installed into the directory /etc/nginx. You can change this and point it where ever you want but i recommend leaving it pointed at /etc/nginx&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that NGINX is configured we want to run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; this will compile all the code and create the NGINX binary for us to run. This can take a bit depending on how much RAM and how powerful your CPU is.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once your done compiling without any errors you’re ready to install NGINX to the directory we defined earlier simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;make install&lt;/code&gt; and that’s it you’ve just compiled NGINX to start it simplly cd into the nginx folder and run &lt;code class=&quot;highlighter-rouge&quot;&gt;./sbin/nginx&lt;/code&gt; now when you open that boxes IP address in a web browser you should see welcome to NGINX!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;One final note for you guys if you inside the nginx folder the NGINX config is located at &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/nginx.conf&lt;/code&gt; and to stop the server run &lt;code class=&quot;highlighter-rouge&quot;&gt;./sbin.nginx -s stop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! if you have any issues, questions or anything else please feel free to contact me via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#098;&amp;#108;&amp;#111;&amp;#103;&amp;#064;&amp;#098;&amp;#111;&amp;#111;&amp;#112;&amp;#115;&amp;#046;&amp;#109;&amp;#101;&quot;&gt;Email&lt;/a&gt; If you wish with my GPG key &lt;a href=&quot;https://frgl.pw/keys/Sir_Boops.txt&quot;&gt;Here&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/Sir_Boops&quot;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Oct 2016 13:56:00 -0600</pubDate>
        <link>https://boops.me/2016/10/13/how-to-compile-nginx.html</link>
        <guid isPermaLink="true">https://boops.me/2016/10/13/how-to-compile-nginx.html</guid>
        
        
      </item>
    
  </channel>
</rss>
